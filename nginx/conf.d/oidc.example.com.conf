# Custom log format to include the 'sub' claim in the REMOTE_USER field
log_format main_jwt '$remote_addr - $jwt_claim_sub [$time_local] "$request" $status '
                    '$body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
		    
server {
    include conf.d/openid_connect.server_conf; # Authorization code flow and Relying Party processing
    error_log /var/log/nginx/error.log debug;  # Reduce severity level as required

    listen 443 ssl;
    server_name oidc.example.com;
    status_zone oidc.example.com_http;

    ssl_certificate /etc/ssl/nginx/oidc.example.com.crt;
    ssl_certificate_key /etc/ssl/nginx/oidc.example.com.key;
    ssl_ciphers TLS_AES_256_GCM_SHA384:HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    location / {
        # This site is protected with OpenID Connect
        auth_jwt "" token=$session_jwt;
        error_page 401 = @do_oidc_flow;

        #auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
        auth_jwt_key_request /_jwks_uri; # Enable when using URL

        # Successfully authenticated users are proxied to the backend,
        # with 'sub' claim passed as HTTP header
        proxy_set_header username $jwt_claim_sub;

        # Bearer token is uses to authorize NGINX to access protected backend
        #proxy_set_header Authorization "Bearer $access_token";

        # Intercept and redirect "401 Unauthorized" proxied responses to nginx
        # for processing with the error_page directive. Necessary if Access Token
        # can expire before ID Token.
        #proxy_intercept_errors on;

	access_log /var/log/nginx/access.log main_jwt;

        add_header X-ServerIP $server_addr;
        add_header X-srv-hostname $hostname;

        proxy_set_header X-Client-IP $remote_addr;
        proxy_set_header X-Hola "Mundo";
        proxy_pass http://10.1.1.6:8081;
    }
}

